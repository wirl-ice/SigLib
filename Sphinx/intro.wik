== Overview ==
There are 4 main ''modes'' that it can run in (or combinations of these)  
# A data '''Discovery Mode''' where remote sensing scenes are discovered by ingesting a copy of the Canadian Ice Service archive (or other geodatabase containing metadata, with tweaks), or by crawling through a hard drive and extracting metadata from zipped SAR scenes, or by querying a table in a local database that contains geospatial metadata.  Queries take a Region Of Interest -- '''ROI shapefile''' with a specific format as input. The region of interest delineates the spatial and temporal search boundaries. The required attribute fields and formats for the ROI are elaborated upon in a section below. 
# An '''Exploratory Mode''' where remote sensing scenes are made ready for viewing.  This includes opening zip files, converting imagery (including Single Look Complex), geographical projection, cropping, masking, image stretching, renaming, and pyramid generation. The user must supply the name of a single zip file that contains the SAR imagery, a directory where a batch of zip files to be prepared resides, or a query that selects a list of zip files to be processed (functionality to come).
# A '''Scientific Mode''' where remote sensing scenes can be converted to either calibrated (sigma0), noise level, or incidence angle images. Image data (from each band) can be subsampled by way of an '''ROI shapefile''' that references every image and specific polygon you want to analyze.  These polygons represent sampling regions that you know about (a priori) or they are hand digitized from Exploratory mode images. Data can be stored in a table in a geodatabase for further processing.
# A '''Polarimetric Mode''' where quad-pol scenes are converted to sigma0, cropped to tracking beacon instances, have polarimetric matricies generated, polarimetric filtering, and polarimetric decompositions generated 

These modes are brought together to work in harmony by '''SigLib.py''' the recommended way to interact with the software.  This program reads in a configuration file that provides all the parameters required to do various jobs.  However, this is only one way to go... Anyone can call the modules identified above from a custom made python script to do what they wish, using the SigLib API

In addition, there are different ways to process ''input'' through SigLib.py that can be changed for these modes.  You can input based on a recursive '''scan''' of a directory for files that match a pattern; you can input one '''file''' at a time (useful for parallelization, when many processes are spawned by gnu parallel).

== Dependencies ==
You will need a computer running linux or windows along with:
* Python 2.x or 3.x (preferred).  It is recommended you install the [https://www.anaconda.com/ Python Anaconda package manager] as it contains pretty well everything you will need related to Python. 
* Python libraries - The following libraries may be installed individually using your preferred package manager (eg. pip, conda); alternatively, you can use the provided Requirements.txt file Setup to install them all at once.
** numpy
** pandas
** psycopg2
** future
** matplotlib
** datetime
** configparser
** gdal
* gdal/ogr libraries - (https://gdal.org/)
* PostrgreSQL/PostGIS (could be on another computer) (https://www.postgresql.org/ and https://postgis.net/)
* SNAP (Sentinel Application Platform from ESA) (https://step.esa.int/main/toolboxes/snap/) - installation will require you to know where your python.exe file is located, if you are using Anaconda, this can be found by entering <where anaconda> into the Anaconda Command Prompt.
Note that it is possible to run the software without SNAP or PosgresSQL/PostGIS but functionality will be ''very'' limited.  

Nice to haves:
* It is highly recommended that you have access to QGIS or ArcGIS to manipulate shapefiles
* You should have a good Python Integrated Development Environment (IDE) - for example: [https://www.spyder-ide.org/ Spyder] (can be installed via Anadonda) 
* To work with ASF CEOS Files, you will need [https://www.asf.alaska.edu/software-tools/#mapready ASF MapReady]
* If you want to take advantage of multiple cores on your ''linux'' machine to greatly enhance processing speed you will need [https://www.gnu.org/software/parallel/ GNU Parallel]

Sorry, but details on how to install and set up these dependencies is out of scope for this manual.

== Acknowledgements ==
This software was conceived and advanced initially by Derek Mueller (while he was a Visiting Fellow at the Canadian Ice Service). Some code was derived from Defence Research and Development Canada (DRDC).  I benefited from discussions with Ron Saper, Angela Cheng and my salary was provided via a CSA GRIP project (PI Roger De Abreu). 

At Carleton this code was modified further and others have worked to improve it since the early days at CIS:  Cindy Lopes (workstudy student & computer programmer) 2012, Sougal Bouh-Ali (workstudy student & computer programmer) 2013-2016, and Cameron Fitzpatrick 2018. Ron Saper, Anna Crawford and Greg Lewis-Paley helped out as well (indirectly).
